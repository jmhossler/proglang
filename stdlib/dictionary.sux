var Dictionary = function() {
  // node
  var Node = function() {
    var color;
    var key;
    var value;

    var parent;
    var left;
    var right;
    this;
  };

  var black = "black";
  var red = "red";

  var root = Node();
  root.color = black;

  var find = function(key) {
    var helpFind = function(node) {
      if(node == nil) {
        nil;
      } else if(node.key == key) {
        node.value;
      } else {
        if(key < node.key) {
          helpFind(node.right);
        } else {
          helpFind(node.left);
        }
      }
    };
    helpFind(root);
  };

  var insert = function(key,value) {
    var result = addHelper(root,key,value);
    insertFixup(result);
  };

  var display = function() {
    var displayHelper = function(node,tab) {
      if(!(node == nil)) {
        displayHelper(node.left,tab+" ");
        print(tab,node.color," ",node.key," ",node.value,"\n");
        displayHelper(node.right,tab+" ");
      }
    };
    displayHelper(root,"");
  };

  var rotate = function(node) {
    var par = parent(node);
    var nod = node;
    var grandpar = grandparent(nod);
    var right = node.right;
    var left = node.left;
    if(isLeftChild(node)) {
      par.left = right;
      if(grandpar == nil) { root = nod; }
      else {
        if(isLeftChild(par)) { grandpar.left = nod; }
        else { grandpar.right = nod; }
      }
      nod.right = par;
    } else {
      par.right = left;
      if(grandpar == nil) { root = nod; }
      else {
        if(isLeftChild(par)) { grandpar.left = nod; }
        else { grandpar.right = nod; }
      }
      nod.left = par;
    }
    nod.parent = grandpar;
    par.parent = nod;
  };

  var insertFixup = function(node) {
    while(!(node === root) && !(color(parent(node)) == black)) {
      //print("Here, nodes value = ",node.value,"\n");
      var unc = uncle(node);
      var par = parent(node);
      var grandpar = grandparent(node);
      //print("About to compare color\n");
      if(color(unc) == red) {
        unc.color = black;
        par.color = black;
        grandpar.color = red;
        node = grandpar;
      } else {
        //print("Color of uncle is black\n");
        if(!(linear(node))) {
          //print("not linear!\n");
          rotate(node);
          var oldPar = par;
          var oldNode = node;
          node = oldPar;
          par = oldNode;
        }
        par.color = black;
        grandpar.color = red;
        //print("About to do rotate\n");
        rotate(par);
      }
    }
    root.color = black;
  };

  // helper functions

  var addHelper = function(node,key,value) {
    if(node.key == nil) {
      node.color = red;
      node.key = key;
      node.value = value;
      node;
    } else {
      if(node.key == key) {
        node.value = value;
      } else if(node.key < key) {
        if(node.left == nil) {
          node.left = Node();
          node.left.parent = node;
        }
        addHelper(node.left,key,value);
      } else {
        if(node.right == nil) {
          node.right = Node();
          node.right.parent = node;
        }
        addHelper(node.right,key,value);
      }
    }
  };

  var isValidRB = function() {
    isValidRBHelper(root);
  };

  var isValidRBHelper = function(node) {
    if(node == nil) {
      1;
    } else if(color(node) == red) {
      !(color(node.left) == red) && !(color(node.right) == red) && isValidRBHelper(node.left) && isValidRBHelper(node.right);
    } else {
      isValidRBHelper(node.left) && isValidRBHelper(node.right);
    }
  };

  var isLeftChild = function(node) {
    node.parent.left === node;
  };

  var rightChild = function(node) {
    node.right;
  };

  var leftChild = function(node) {
    node.left;
  };

  var color = function(node) {
    if(node == nil) {
      black;
    } else {
      node.color;
    }
  };

  var parent = function(node) {
    node.parent;
  };

  var sibling = function(node) {
    if(isLeftChild(node)) {
      rightChild(parent(node));
    } else {
      leftChild(parent(node));
    }
  };

  var niece = function(node) {
    if(isLeftChild(node)) {
      leftChild(sibling(node));
    } else {
      rightChild(sibling(node));
    }
  };

  var nephew = function(node) {
    if(isLeftChild(node)) {
      rightChild(sibling(node));
    } else {
      leftChild(sibling(node));
    }
  };

  var linear = function(node) {
    if(isLeftChild(node)) {
      isLeftChild(parent(node));
    } else {
      !(isLeftChild(parent(node)));
    }
  };



  var leaf = function(node) {
    node == nil;
  };

  var blackHeight = function(node) {
    if(leaf(node)) {
      1;
    } else {
      var left = blackHeight(node.left);
      var right = blackHeight(node.right);
      if(left < right) {
        1 + right;
      } else {
        1 + left;
      }
    }
  };


  var grandparent = function(node) {
    node.parent.parent;
  };

  var uncle = function(node) {
    if(isLeftChild(parent(node))) {
      rightChild(grandparent(node));
    } else {
      leftChild(grandparent(node));
    }
  };

  this;
};


